{
    "version": "https://jsonfeed.org/version/1",
    "title": "Java &amp; JavaScript hub",
    "description": "",
    "home_page_url": "https://chung142003.github.io/laptrinhmang",
    "feed_url": "https://chung142003.github.io/laptrinhmang/feed.json",
    "user_comment": "",
    "icon": "https://chung142003.github.io/laptrinhmang/media/website/Screenshot-2024-12-11-204157.png",
    "author": {
        "name": "đức chung ( chung choáy )"
    },
    "items": [
        {
            "id": "https://chung142003.github.io/laptrinhmang/full-stack-development-ket-hop-java-backend-va-javascript-frontend.html",
            "url": "https://chung142003.github.io/laptrinhmang/full-stack-development-ket-hop-java-backend-va-javascript-frontend.html",
            "title": "Full-stack Development: Kết hợp Java (Backend) và JavaScript (Frontend)",
            "summary": "Full-stack Development: Kết hợp Java (Backend) và JavaScript (Frontend) Trong thời đại số hóa, việc xây dựng các ứng dụng web ngày càng trở nên quan trọng. Trong bài viết này, chúng ta sẽ khám phá cách kết hợp Java ở backend và JavaScript ở&hellip;",
            "content_html": "<h3>Full-stack Development: Kết hợp Java (Backend) và JavaScript (Frontend)</h3>\n<p>Trong thời đại số hóa, việc xây dựng các ứng dụng web ngày càng trở nên quan trọng. Trong bài viết này, chúng ta sẽ khám phá cách kết hợp <strong>Java</strong> ở backend và <strong>JavaScript</strong> ở frontend để tạo một ứng dụng web hoàn chỉnh theo mô hình Full-stack Development. Hãy cùng xây dựng một ứng dụng quản lý công việc (To-Do List).</p>\n<hr>\n<h3><strong>1. Tổng quan dự án</strong></h3>\n<ul>\n<li>\n<p><strong>Mục tiêu:</strong></p>\n<ul>\n<li>Backend: Xây dựng API RESTful bằng Java (Spring Boot).</li>\n<li>Frontend: Xây dựng giao diện người dùng bằng JavaScript (React.js).</li>\n<li>Kết nối frontend và backend để thực hiện các thao tác CRUD (Create, Read, Update, Delete).</li>\n</ul>\n</li>\n<li>\n<p><strong>Công cụ sử dụng:</strong></p>\n<ul>\n<li>Java 17 hoặc mới hơn.</li>\n<li>Spring Boot (với Maven/Gradle).</li>\n<li>Node.js và npm (dành cho React).</li>\n<li>Cơ sở dữ liệu: H2 hoặc MySQL.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3><strong>2. Xây dựng Backend với Java (Spring Boot)</strong></h3>\n<h4><strong>a. Tạo Project Spring Boot</strong></h4>\n<ol>\n<li>Truy cập <a href=\"https://start.spring.io/\">Spring Initializr</a>.</li>\n<li>Chọn cấu hình:\n<ul>\n<li>Project: Maven</li>\n<li>Language: Java</li>\n<li>Dependencies: Spring Web, Spring Data JPA, H2 Database (hoặc MySQL).</li>\n</ul>\n</li>\n<li>Tải xuống project và mở trong IDE (IntelliJ IDEA, Eclipse, VS Code).</li>\n</ol>\n<h4><strong>b. Cấu hình CSDL</strong></h4>\n<ul>\n<li><strong>application.properties</strong>:</li>\n</ul>\n<pre><code class=\"language-properties\">spring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.jpa.hibernate.ddl-auto=update\n</code></pre>\n<h4><strong>c. Tạo Entity (Bảng trong CSDL)</strong></h4>\n<pre><code class=\"language-java\">import jakarta.persistence.*;\n\n@Entity\npublic class Task {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String title;\n    private boolean completed;\n\n    // Getters và Setters\n}\n</code></pre>\n<h4><strong>d. Tạo Repository</strong></h4>\n<pre><code class=\"language-java\">import org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface TaskRepository extends JpaRepository&lt;Task, Long&gt; {\n}\n</code></pre>\n<h4><strong>e. Xây dựng REST Controller</strong></h4>\n<pre><code class=\"language-java\">import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/tasks\")\npublic class TaskController {\n\n    @Autowired\n    private TaskRepository repository;\n\n    @GetMapping\n    public List&lt;Task&gt; getAllTasks() {\n        return repository.findAll();\n    }\n\n    @PostMapping\n    public Task createTask(@RequestBody Task task) {\n        return repository.save(task);\n    }\n\n    @PutMapping(\"/{id}\")\n    public Task updateTask(@PathVariable Long id, @RequestBody Task task) {\n        Task existingTask = repository.findById(id).orElseThrow();\n        existingTask.setTitle(task.getTitle());\n        existingTask.setCompleted(task.isCompleted());\n        return repository.save(existingTask);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public void deleteTask(@PathVariable Long id) {\n        repository.deleteById(id);\n    }\n}\n</code></pre>\n<ul>\n<li><strong>Chạy ứng dụng:</strong>\n<ul>\n<li>Truy cập <a href=\"http://localhost:8080/api/tasks\">http://localhost:8080/api/tasks</a> để kiểm tra API.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3><strong>3. Xây dựng Frontend với JavaScript (React.js)</strong></h3>\n<h4><strong>a. Tạo Project React</strong></h4>\n<ol>\n<li>Cài đặt React bằng lệnh:\n<pre><code class=\"language-bash\">npx create-react-app todo-frontend\ncd todo-frontend\n</code></pre>\n</li>\n<li>Cài đặt thư viện Axios để gọi API:\n<pre><code class=\"language-bash\">npm install axios\n</code></pre>\n</li>\n</ol>\n<h4><strong>b. Xây dựng Giao diện</strong></h4>\n<ul>\n<li><strong>App.js:</strong></li>\n</ul>\n<pre><code class=\"language-javascript\">import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState(\"\");\n\n    useEffect(() =&gt; {\n        axios.get(\"http://localhost:8080/api/tasks\")\n            .then(response =&gt; setTasks(response.data))\n            .catch(error =&gt; console.error(error));\n    }, []);\n\n    const addTask = () =&gt; {\n        axios.post(\"http://localhost:8080/api/tasks\", { title: newTask, completed: false })\n            .then(response =&gt; setTasks([...tasks, response.data]))\n            .catch(error =&gt; console.error(error));\n        setNewTask(\"\");\n    };\n\n    const deleteTask = (id) =&gt; {\n        axios.delete(`http://localhost:8080/api/tasks/${id}`)\n            .then(() =&gt; setTasks(tasks.filter(task =&gt; task.id !== id)))\n            .catch(error =&gt; console.error(error));\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;To-Do List&lt;/h1&gt;\n            &lt;input\n                type=\"text\"\n                value={newTask}\n                onChange={(e) =&gt; setNewTask(e.target.value)}\n                placeholder=\"New Task\"\n            /&gt;\n            &lt;button onClick={addTask}&gt;Add&lt;/button&gt;\n\n            &lt;ul&gt;\n                {tasks.map(task =&gt; (\n                    &lt;li key={task.id}&gt;\n                        {task.title} &lt;button onClick={() =&gt; deleteTask(task.id)}&gt;Delete&lt;/button&gt;\n                    &lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre>\n<h4><strong>c. Chạy ứng dụng React</strong></h4>\n<ol>\n<li>Chạy lệnh:\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n</li>\n<li>Truy cập <a href=\"http://localhost:3000/\">http://localhost:3000</a> để xem giao diện.</li>\n</ol>\n<hr>\n<h3><strong>4. Kết nối Frontend và Backend</strong></h3>\n<ul>\n<li>\n<p>Đảm bảo cả hai ứng dụng đang chạy:</p>\n<ul>\n<li>Backend: Chạy tại <a href=\"http://localhost:8080/\">http://localhost:8080</a>.</li>\n<li>Frontend: Chạy tại <a href=\"http://localhost:3000/\">http://localhost:3000</a>.</li>\n</ul>\n</li>\n<li>\n<p>Nếu gặp lỗi CORS, thêm cấu hình sau vào backend:</p>\n</li>\n</ul>\n<pre><code class=\"language-java\">import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfig {\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\").allowedOrigins(\"http://localhost:3000\");\n            }\n        };\n    }\n}\n</code></pre>\n<hr>\n<h3><strong>5. Kết luận</strong></h3>\n<p>Bạn đã hoàn thành một ứng dụng To-Do List kết hợp Java (backend) và JavaScript (frontend). Đây là ví dụ cơ bản nhưng quan trọng để hiểu cách kết hợp hai ngôn ngữ trong một dự án Full-stack. Từ đây, bạn có thể mở rộng ứng dụng với tính năng đăng nhập, quản lý người dùng, hoặc triển khai ứng dụng lên server thực tế (Heroku, AWS, v.v.).</p>\n<hr>\n<p>Bạn có muốn mình giải thích chi tiết thêm hoặc hỗ trợ mở rộng tính năng nào không?</p>",
            "author": {
                "name": "đức chung ( chung choáy )"
            },
            "tags": [
            ],
            "date_published": "2024-12-21T21:48:32+07:00",
            "date_modified": "2024-12-21T21:49:13+07:00"
        },
        {
            "id": "https://chung142003.github.io/laptrinhmang/bai-3-xay-dung-ung-dung-dau-tien-hello-world.html",
            "url": "https://chung142003.github.io/laptrinhmang/bai-3-xay-dung-ung-dung-dau-tien-hello-world.html",
            "title": "Bài 3: Xây dựng ứng dụng đầu tiên: &quot;Hello World&quot;",
            "summary": "Tiêu đề: \"Viết chương trình Hello World bằng Java và JavaScript\" Nội dung: Hướng dẫn cách viết một chương trình \"Hello World\" trong Java (sử dụng console hoặc GUI). Tạo một ứng dụng web đơn giản sử dụng JavaScript để hiển thị \"Hello World\" trên&hellip;",
            "content_html": "<h3> </h3>\n<ul>\n<li><strong>Tiêu đề:</strong> \"Viết chương trình Hello World bằng Java và JavaScript\"</li>\n<li><strong>Nội dung:</strong>\n<ul>\n<li>Hướng dẫn cách viết một chương trình \"Hello World\" trong Java (sử dụng console hoặc GUI).</li>\n<li>Tạo một ứng dụng web đơn giản sử dụng JavaScript để hiển thị \"Hello World\" trên trình duyệt.</li>\n<li>So sánh cách triển khai giữa hai ngôn ngữ.</li>\n</ul>\n</li>\n<li><strong>Mục tiêu:</strong> Bài thực hành cho người mới bắt đầu.</li>\n</ul>",
            "author": {
                "name": "đức chung ( chung choáy )"
            },
            "tags": [
            ],
            "date_published": "2024-12-21T21:48:20+07:00",
            "date_modified": "2024-12-21T21:48:20+07:00"
        },
        {
            "id": "https://chung142003.github.io/laptrinhmang/bai-2-lam-quen-voi-cu-phap-co-ban-cua-java-va-javascript.html",
            "url": "https://chung142003.github.io/laptrinhmang/bai-2-lam-quen-voi-cu-phap-co-ban-cua-java-va-javascript.html",
            "title": "Bài 2: Làm quen với cú pháp cơ bản của Java và JavaScript",
            "summary": "Tiêu đề: \"So sánh cú pháp cơ bản giữa Java và JavaScript\" Nội dung: Biến và kiểu dữ liệu trong Java và JavaScript. Các câu lệnh điều kiện (if, switch) và vòng lặp (for, while). Cách định nghĩa và sử dụng hàm trong cả hai&hellip;",
            "content_html": "<h3> </h3>\n<ul>\n<li><strong>Tiêu đề:</strong> \"So sánh cú pháp cơ bản giữa Java và JavaScript\"</li>\n<li><strong>Nội dung:</strong>\n<ul>\n<li>Biến và kiểu dữ liệu trong Java và JavaScript.</li>\n<li>Các câu lệnh điều kiện (<code>if</code>, <code>switch</code>) và vòng lặp (<code>for</code>, <code>while</code>).</li>\n<li>Cách định nghĩa và sử dụng hàm trong cả hai ngôn ngữ.</li>\n</ul>\n</li>\n<li><strong>Mục tiêu:</strong> Tạo sự kết nối cho người mới học khi chuyển từ Java sang JavaScript (hoặc ngược lại).</li>\n</ul>",
            "author": {
                "name": "đức chung ( chung choáy )"
            },
            "tags": [
            ],
            "date_published": "2024-12-21T21:47:03+07:00",
            "date_modified": "2024-12-21T21:47:03+07:00"
        },
        {
            "id": "https://chung142003.github.io/laptrinhmang/bat-dau-voi-java.html",
            "url": "https://chung142003.github.io/laptrinhmang/bat-dau-voi-java.html",
            "title": "Bắt đầu với JAVA",
            "summary": "Tiêu đề: \"Java và JavaScript: Hai ngôn ngữ, một tên gọi, có gì khác biệt?\" Nội dung: Giới thiệu tổng quan về Java và JavaScript. Phân biệt điểm khác nhau giữa hai ngôn ngữ: mục đích sử dụng, cách hoạt động (backend vs frontend), môi&hellip;",
            "content_html": "<ul>\n<li><strong>Tiêu đề:</strong> \"Java và JavaScript: Hai ngôn ngữ, một tên gọi, có gì khác biệt?\"</li>\n<li><strong>Nội dung:</strong>\n<ul>\n<li>Giới thiệu tổng quan về Java và JavaScript.</li>\n<li>Phân biệt điểm khác nhau giữa hai ngôn ngữ: mục đích sử dụng, cách hoạt động (backend vs frontend), môi trường chạy (JVM vs trình duyệt).</li>\n<li>Ứng dụng phổ biến của mỗi ngôn ngữ.</li>\n</ul>\n</li>\n<li><strong>Mục tiêu:</strong> Giúp người đọc hiểu rõ sự khác biệt và vai trò của từng ngôn ngữ.</li>\n<li><strong>Tiêu đề:</strong> \"Java và JavaScript: Hai ngôn ngữ, một tên gọi, có gì khác biệt?\"</li>\n<li><strong>Nội dung:</strong>\n<ul>\n<li>Giới thiệu tổng quan về Java và JavaScript.</li>\n<li>Phân biệt điểm khác nhau giữa hai ngôn ngữ: mục đích sử dụng, cách hoạt động (backend vs frontend), môi trường chạy (JVM vs trình duyệt).</li>\n<li>Ứng dụng phổ biến của mỗi ngôn ngữ.</li>\n</ul>\n</li>\n<li><strong>Mục tiêu:</strong> Giúp người đọc hiểu rõ sự khác biệt và vai trò của từng ngôn ngữ.</li>\n</ul>",
            "author": {
                "name": "đức chung ( chung choáy )"
            },
            "tags": [
            ],
            "date_published": "2024-12-21T21:46:46+07:00",
            "date_modified": "2024-12-21T21:47:21+07:00"
        }
    ]
}
